#+TITLE:       bzg .emacs.el file
#+EMAIL:       bzg AT bzg DOT fr
#+STARTUP:     odd hidestars fold
#+LANGUAGE:    fr
#+LINK:        guerry https://bzg.fr/%s
#+OPTIONS:     skip:nil toc:nil
#+HTML_HEAD:   <link rel="publisher" href="https://plus.google.com/103809710979116858042" />
#+PROPERTY:    header-args :tangle emacs.el

This is my =.emacs.el= file, as a HTMLized =emacs.org= file.

You can browse the =.el= file [[http://bzg.fr/u/emacs.el][here]] or clone the =.org= file from [[https://github.com/bzg/dotemacs][github]].

Comments and suggestions are welcome! =bzg AT gnu DOT org=

* Package initialization

#+BEGIN_SRC emacs-lisp
;; I don't use package a lot but don't want to configure the list of
;; archives each time I use it.

;; Package initialization
(require 'package)
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("melpa" . "http://melpa.org/packages/")))
(package-initialize)
#+END_SRC

* General defaults

#+BEGIN_SRC emacs-lisp
;; Initialize `exec-path' and `load-path'
(add-to-list 'exec-path "~/bin/")
(let ((default-directory "~/elisp/"))
  (normal-top-level-add-subdirs-to-load-path))
(let ((default-directory "/usr/share/emacs/site-lisp/"))
  (normal-top-level-add-subdirs-to-load-path))
(let ((default-directory "/usr/local/share/emacs/site-lisp/"))
  (normal-top-level-add-subdirs-to-load-path))
(add-to-list 'load-path "~/install/cvs/emacs-w3m/")
(add-to-list 'load-path "~/install/git/org-caldav/")
(add-to-list 'load-path "~/install/git/elscreen/")
(add-to-list 'load-path "~/install/git/bbdb/lisp/")
(add-to-list 'load-path "~/install/git/notmuch/emacs/")
(add-to-list 'load-path "~/install/git/org-mode/lisp/")
(add-to-list 'load-path "~/install/git/org-mode/contrib/lisp/")

;; Start server to use emacsclient
(server-start)

;; Load custom file
(setq custom-file "/home/guerry/elisp/config/emacs-custom.el")
(load custom-file)

;; Load theme
(add-to-list 'custom-theme-load-path "~/install/git/cyberpunk-theme.el/")
(load-theme 'cyberpunk)
;; (load-theme 'paganini)

;; Initialize `Info-directory-list' to include org-mode
(setq Info-refill-paragraphs t)
(add-to-list 'Info-directory-list "~/install/git/org-mode/doc/")

;; Don't ask for confirmation for "dangerous" commands
(put 'erase-buffer 'disabled nil)
(put 'narrow-to-page 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'scroll-left 'disabled nil)
(put 'scroll-right 'disabled nil)
(put 'set-goal-column 'disabled nil)

;; We expect local variables to be known
(setq enable-local-variables t)
(setq enable-local-eval t)
#+END_SRC

* Enable/Disable some minor modes

#+BEGIN_SRC emacs-lisp
;; Enabling and disabling some modes
(show-paren-mode 1)
(display-time-mode 1)
(tooltip-mode -1)
(electric-pair-mode -1)
(blink-cursor-mode -1)
(mouse-avoidance-mode 'cat-and-mouse)
(setq max-lisp-eval-depth 10000)

;; Default Frame
(setq initial-frame-alist
      '((alpha . 85)
        (left-margin-width . 10)
        (menu-bar-lines . 0)
        (tool-bar-lines . 0)
        (horizontal-scroll-bars . nil)
        (vertical-scroll-bars . nil)))

;; Don't display initial messages
(setq initial-scratch-message "")
(setq initial-major-mode 'org-mode)
(setq inhibit-startup-message t)
(setq inhibit-startup-echo-area-message "guerry")
(setq use-dialog-box nil)
(setq default-frame-alist initial-frame-alist)
(set-frame-parameter nil 'fullscreen 'fullboth)
#+END_SRC

* Other useful defaults

#+BEGIN_SRC emacs-lisp
;; Who I am
(setq user-full-name "Bastien Guerry")
(setq user-mail-address "bzg@bzg.fr")

;; Let's get a backtrace when errors are
(setq debug-on-error t)

;; Display byte-compiler warnings on error
(setq byte-compile-debug t)

;; The default is to wait 1 second, which I find a bit long
(setq echo-keystrokes 0.1)

;; Stop polluting the directory with auto-saved files and backup
(setq auto-save-default nil)
(setq make-backup-files nil)
(setq auto-save-list-file-prefix nil)

;; Well, it's more so that you know this option
(setq kill-ring-max 120)
(setq kill-whole-line t)
(setq kill-read-only-ok t)
(setq require-final-newline t)

;; Scrolling done right
(setq scroll-error-top-bottom t)

;; Number of lines of continuity when scrolling by screenfulls
(setq next-screen-context-lines 0)

;; Always use "y" for "yes"
(fset 'yes-or-no-p 'y-or-n-p)

;; elp.el is the Emacs Lisp profiler, sort by average time
(setq elp-sort-by-function 'elp-sort-by-average-time)

(setenv "EDITOR" "emacsclient")
(setenv "CVS_RSH" "ssh")

(require 'whitespace)
(add-to-list 'whitespace-style 'lines-tail)
(setq whitespace-line-column 80)

;; I'm using an old elscreen but there is more recent activity:
;; https://github.com/knu/elscreen
(require 'elscreen)
(elscreen-start)
(setq elscreen-display-tab nil)
(setq elscreen-tab-display-control nil)
#+END_SRC

* Require

#+BEGIN_SRC emacs-lisp
(require 'ibuffer)
(require 'dash)
(require 'cider)
(require 'company)

;; M-x package-install RET register-list RET
(require 'register-list)

;; Cider basic configuration
(setq nrepl-hide-special-buffers t)
(setq cider-repl-pop-to-buffer-on-connect nil)

;; `line-spacing' is nil by default, I change it from time to time
;; (setq line-spacing 0)

(setq fill-column 72)
(setq line-move-visual nil)
;; (setq show-trailing-whitespace t)
(setq visible-bell t)
(setq spell-command "aspell")
(setq tab-always-indent 'always)
(setq display-time-mail-string "#")
(setq focus-follows-mouse t)
(setq text-mode-hook '(turn-on-auto-fill text-mode-hook-identify))

;; Set browser
(require 'w3m)
(if window-system
    (setq browse-url-browser-function 'browse-url-chromium)
  ;; (setq browse-url-browser-function 'eww-browse-url)
  (setq browse-url-browser-function 'eww-browse-url))
(setq browse-url-text-browser "w3m")
(setq browse-url-new-window-flag t)
(setq browse-url-firefox-new-window-is-tab t)
#+END_SRC

* Keybindings

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-h /") 'find-function)
(global-set-key (kbd "C-x <C-backspace>") 'bzg-find-bzg)
(global-set-key (kbd "<home>") 'beginning-of-buffer)
(global-set-key (kbd "<end>") 'end-of-buffer)
(global-set-key (quote [f1]) 'gnus)
(global-set-key (kbd "<XF86AudioMute>") 'gnus)
(global-set-key (quote [f2]) 'hidden-mode-line-mode)
(global-set-key (quote [f3]) 'bzg-big-fringe-mode)
(global-set-key (quote [f6]) 'w3m)
(global-set-key (quote [f7]) 'auto-fill-mode)
(global-set-key (quote [f8]) 'occur)
(global-set-key (quote [f9]) 'magit-status)
(global-set-key [(shift f8)] 'multi-occur)
(global-set-key (quote [f10]) 'calc)
(global-set-key (quote [f11]) 'eshell)
(global-set-key (kbd "M-+") 'text-scale-increase)
(global-set-key (kbd "M--") 'text-scale-decrease)
(global-set-key (kbd "M-0") 'text-scale-adjust)
(global-set-key (kbd "C-M-]") (lambda () (interactive) (org-cycle t)))
(global-set-key (kbd "M-]")
                (lambda () (interactive)
                  (ignore-errors (end-of-defun) (beginning-of-defun)) (org-cycle)))
(global-set-key (quote [f12]) 'calendar)
(global-set-key (kbd "C-x r L") 'register-list)

;; (global-set-key (kbd "<XF86AudioLowerVolume>")
;; 		(lambda () (interactive) (shell-command "pactl set-sink-volume 0 0")))
;; (global-set-key (kbd "<XF86AudioRaiseVolume>")
;; 		(lambda () (interactive) (shell-command "pactl set-sink-volume 0 64000")))

(require 'dired-x)
(global-set-key (kbd "C-x d") 'dired)
(define-key dired-mode-map ")" 'dired-details-toggle)
(define-key dired-mode-map "\C-cg" 'grep-find)
(define-key dired-mode-map "\C-cd" 'dired-clean-tex)

(defun unfill-paragraph ()
  "Make a multi-line paragraph into a single line of text."
  (interactive)
  (let ((fill-column (point-max)))
    (fill-paragraph nil)))

;; Handy key definition
(define-key global-map "\M-Q" 'unfill-paragraph)
#+END_SRC

* Dired

#+BEGIN_SRC emacs-lisp
(setq directory-free-space-args "-Pkh")
(setq list-directory-verbose-switches "-al")
(setq dired-listing-switches "-l")
(setq dired-dwim-target t)
(setq dired-omit-mode nil)
(setq dired-recursive-copies 'always)
(setq dired-recursive-deletes 'always)
(setq delete-old-versions t)

(setq dired-guess-shell-alist-user
      (list
       (list "\\.pdf$" "evince")
       (list "\\.docx?$" "libreoffice")
       (list "\\.aup?$" "audacity")
       (list "\\.pptx?$" "libreoffice")
       (list "\\.odf$" "libreoffice")
       (list "\\.odt$" "libreoffice")
       (list "\\.odt$" "libreoffice")
       (list "\\.kdenlive$" "kdenlive")
       (list "\\.svg$" "gimp")
       (list "\\.csv$" "libreoffice")
       (list "\\.sla$" "scribus")
       (list "\\.od[sgpt]$" "libreoffice")
       (list "\\.xls$" "libreoffice")
       (list "\\.xlsx$" "libreoffice")
       (list "\\.txt$" "gedit")
       (list "\\.sql$" "gedit")
       (list "\\.css$" "gedit")
       (list "\\.html$" "w3m")
       (list "\\.jpe?g$" "geeqie")
       (list "\\.png$" "geeqie")
       (list "\\.gif$" "geeqie")
       (list "\\.psd$" "gimp")
       (list "\\.xcf" "gimp")
       (list "\\.xo$" "unzip")
       (list "\\.3gp$" "mplayer")
       (list "\\.mp3$" "mplayer")
       (list "\\.flac$" "mplayer")
       (list "\\.avi$" "mplayer")
       ;; (list "\\.og[av]$" "mplayer")
       (list "\\.wm[va]$" "mplayer")
       (list "\\.flv$" "mplayer")
       (list "\\.mov$" "mplayer")
       (list "\\.divx$" "mplaer")
       (list "\\.mp4$" "mplayer")
       (list "\\.webm$" "mplayer")
       (list "\\.mkv$" "mplayer")
       (list "\\.mpe?g$" "mplayer")
       (list "\\.m4[av]$" "mplayer")
       (list "\\.mp2$" "mplayer")
       (list "\\.pp[st]$" "libreoffice")
       (list "\\.ogg$" "mplayer")
       (list "\\.ogv$" "mplayer")
       (list "\\.rtf$" "libreoffice")
       (list "\\.ps$" "gv")
       (list "\\.mp3$" "play")
       (list "\\.wav$" "mplayer")
       (list "\\.rar$" "unrar x")
       ))

(setq dired-tex-unclean-extensions
  '(".toc" ".log" ".aux" ".dvi" ".out" ".nav" ".snm"))
#+END_SRC

* Appointments

#+BEGIN_SRC emacs-lisp
(appt-activate t)
(setq display-time-24hr-format t
      display-time-day-and-date t
      appt-audible nil
      appt-display-interval 10
      appt-message-warning-time 120)
(setq diary-file "~/.diary")
#+END_SRC

* org-mode

#+BEGIN_SRC emacs-lisp
(require 'org)
(require 'ox-rss)
(require 'ox-md)
(require 'ox-beamer)
(require 'ox-latex)
(require 'ox-odt)
(require 'org-gnus)
(require 'ox-koma-letter)
(setq org-koma-letter-use-email t)
(setq org-koma-letter-use-foldmarks nil)

;; org-mode global keybindings
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cc" 'org-capture)
(define-key global-map "\C-cL" 'org-occur-link-in-agenda-files)

;; I keep those here to change it on the fly
;; (setq org-element-use-cache nil)
;; (setq org-adapt-indentation t)

;; Hook to update all blocks before saving
(add-hook 'org-mode-hook
          (lambda() (add-hook 'before-save-hook
                              'org-update-all-dblocks t t)))

;; Hook to display dormant article in Gnus
(add-hook 'org-follow-link-hook
          (lambda ()
            (if (eq major-mode 'gnus-summary-mode)
                (gnus-summary-insert-dormant-articles))))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (sh . t)
   (dot . t)
   (clojure . t)
   (org . t)
   (ditaa . t)
   (org . t)
   (ledger . t)
   (scheme . t)
   (plantuml . t)
   (R . t)
   (gnuplot . t)))

(setq org-babel-default-header-args
      '((:session . "none")
        (:results . "replace")
        (:exports . "code")
        (:cache . "no")
        (:noweb . "yes")
        (:hlines . "no")
        (:tangle . "no")
        (:padnewline . "yes")))

(org-clock-persistence-insinuate)

;; Set headlines to STRT when clocking in
(add-hook 'org-clock-in-hook (lambda() (org-todo "STRT")))

(setq org-edit-src-content-indentation 0)
(setq org-babel-clojure-backend 'cider)
(setq org-agenda-bulk-mark-char "*")
(setq org-agenda-diary-file "/home/guerry/org/rdv.org")
(setq org-agenda-dim-blocked-tasks nil)
(setq org-agenda-entry-text-maxlines 10)
(setq org-agenda-files '("~/org/rdv.org" "~/org/bzg.org"))
(setq org-agenda-prefix-format
      '((agenda . " %i %-12:c%?-14t%s")
        (timeline . "  % s")
        (todo . " %i %-14:c")
        (tags . " %i %-14:c")
        (search . " %i %-14:c")))
(setq org-agenda-remove-tags t)
(setq org-agenda-restore-windows-after-quit t)
(setq org-agenda-show-inherited-tags nil)
(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-skip-deadline-prewarning-if-scheduled t)
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-timestamp-if-done t)
(setq org-agenda-sorting-strategy
      '((agenda time-up) (todo time-up) (tags time-up) (search time-up)))
(setq org-agenda-tags-todo-honor-ignore-options t)
(setq org-agenda-use-tag-inheritance nil)
(setq org-agenda-window-frame-fractions '(0.0 . 0.5))
(setq org-agenda-deadline-faces
      '((1.0001 . org-warning)              ; due yesterday or before
        (0.0    . org-upcoming-deadline)))  ; due today or later
(setq org-export-default-language "fr")
(setq org-export-backends '(latex odt icalendar html ascii rss koma-letter))
(setq org-export-with-archived-trees nil)
(setq org-export-with-drawers '("HIDE"))
(setq org-export-with-section-numbers nil)
(setq org-export-with-sub-superscripts nil)
(setq org-export-with-tags 'not-in-toc)
(setq org-export-with-timestamps t)
(setq org-html-head "")
(setq org-html-head-include-default-style nil)
(setq org-export-with-toc nil)
(setq org-export-with-priority t)
(setq org-export-dispatch-use-expert-ui nil)
(setq org-export-babel-evaluate t)
(setq org-latex-listings t)
(setq org-latex-pdf-process
      '("pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f" "pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f" "pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f"))
(setq org-export-allow-bind-keywords t)
(setq org-publish-list-skipped-files nil)
(setq org-html-table-row-tags
      (cons '(cond (top-row-p "<tr class=\"tr-top\">")
                   (bottom-row-p "<tr class=\"tr-bottom\">")
                   (t (if (= (mod row-number 2) 1)
                          "<tr class=\"tr-odd\">"
                        "<tr class=\"tr-even\">")))
            "</tr>"))
(setq org-pretty-entities t)
(setq org-fast-tag-selection-single-key 'expert)
(setq org-fontify-done-headline t)
(setq org-footnote-auto-label 'confirm)
(setq org-footnote-auto-adjust t)
(setq org-hide-emphasis-markers t)
(setq org-icalendar-include-todo 'all)
(setq org-link-frame-setup '((gnus . gnus) (file . find-file-other-window)))
(setq org-link-mailto-program '(browse-url-mail "mailto:%a?subject=%s"))
(setq org-log-note-headings
      '((done . "CLOSING NOTE %t") (state . "State %-12s %t") (clock-out . "")))
(setq org-priority-start-cycle-with-default nil)
(setq org-refile-targets '((org-agenda-files . (:maxlevel . 2))
                           (("~/org/garden.org") . (:maxlevel . 2))
                           (("~/org/libre.org") . (:maxlevel . 2))))
(setq org-refile-use-outline-path t)
(setq org-refile-allow-creating-parent-nodes t)
(setq org-refile-use-cache t)
(setq org-return-follows-link t)
(setq org-reverse-note-order t)
(setq org-scheduled-past-days 100)
(setq org-special-ctrl-a/e 'reversed)
(setq org-special-ctrl-k t)
(setq org-stuck-projects '("+LEVEL=1" ("NEXT" "TODO" "DONE")))
(setq org-tag-persistent-alist '(("Write" . ?w) ("Read" . ?r)))
(setq org-tag-alist
      '((:startgroup . nil)
        ("Write" . ?w) ("Code" . ?c) ("Read" . ?r) ("View" . ?v) ("Listen" . ?l)
        (:endgroup . nil)
	("@Offline" . ?O)
        ("Print" . ?P) ("Patch" . ?p) ("Bug" . ?b)
	("Buy" . ?B) ("Mail" . ?@) ("Tel" . ?t)))
(setq org-tags-column -74)
(setq org-todo-keywords '((type "STRT" "NEXT" "TODO" "WAIT" "|" "DONE" "CANCELED")))
(setq org-use-property-inheritance t)
(setq org-use-sub-superscripts nil)
(setq org-clock-persist t)
(setq org-clock-history-length 35)
(setq org-clock-in-resume t)
(setq org-clock-out-remove-zero-time-clocks t)
(setq org-clock-sound t)
(setq org-insert-heading-respect-content t)
(setq org-id-method 'uuidgen)
(setq org-combined-agenda-icalendar-file "~/org/bzg.ics")
(setq org-icalendar-combined-name "Bastien Guerry ORG")
(setq org-icalendar-use-scheduled '(todo-start event-if-todo event-if-not-todo))
(setq org-icalendar-use-deadline '(todo-due event-if-todo event-if-not-todo))
(setq org-icalendar-timezone "Europe/Paris")
(setq org-icalendar-store-UID t)
(setq org-timer-default-timer "20")
(setq org-confirm-babel-evaluate nil)
(setq org-archive-default-command 'org-archive-to-archive-sibling)
(setq org-clock-idle-time 15)
(setq org-id-uuid-program "uuidgen")
(setq org-modules '(org-bbdb org-bibtex org-docview org-gnus org-protocol org-info org-irc org-w3m org-learn))
(setq org-use-speed-commands
      (lambda nil
        (and (looking-at org-outline-regexp-bol)
             (not (org-in-src-block-p t)))))
(setq org-src-fontify-natively t)
(setq org-todo-keyword-faces '(("STRT" . "yellow3")
                               ("WAIT" . "grey")
                               ("CANCELED" . "grey30")))
(setq org-footnote-section "Notes")
(setq org-plantuml-jar-path "~/bin/plantuml.jar")
(setq org-link-abbrev-alist
      '(("ggle" . "http://www.google.com/search?q=%s")
        ("gmap" . "http://maps.google.com/maps?q=%s")
        ("omap" . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")))

(setq org-attach-directory "~/org/data/")
(setq org-link-display-descriptive nil)
(setq org-loop-over-headlines-in-active-region t)
(setq org-create-formula-image-program 'dvipng) ;; imagemagick
(setq org-allow-promoting-top-level-subtree t)
(setq org-description-max-indent 5)
(setq org-gnus-prefer-web-links nil)
(setq org-html-head-include-default-style nil)
(setq org-html-head-include-scripts nil)
(setq org-clock-display-default-range nil)
(setq org-blank-before-new-entry '((heading . t) (plain-list-item . auto)))
(setq org-crypt-key "Bastien Guerry")
(setq org-enforce-todo-dependencies t)
(setq org-fontify-whole-heading-line t)
(setq org-file-apps
      '((auto-mode . emacs)
        ("\\.mm\\'" . default)
        ("\\.x?html?\\'" . default)
        ("\\.pdf\\'" . "evince %s")))
(setq org-hide-leading-stars t)
(setq org-global-properties '(("Effort_ALL" . "0:10 0:30 1:00 2:00 3:30 7:00")))
(setq org-confirm-elisp-link-function nil)
(setq org-confirm-shell-link-function nil)
(setq org-cycle-include-plain-lists nil)
(setq org-deadline-warning-days 7)
(setq org-default-notes-file "~/org/notes.org")
(setq org-directory "~/org/")
(setq org-ellipsis nil)
(setq org-email-link-description-format "%c: %.50s")
(setq org-support-shift-select t)
(setq org-export-filter-planning-functions
      '(my-org-html-export-planning))
(setq org-export-with-broken-links t)
(setq org-ellipsis "…")

(add-to-list 'org-latex-classes
             '("my-letter"
               "\\documentclass\{scrlttr2\}
            \\usepackage[english,frenchb]{babel}
            \[NO-DEFAULT-PACKAGES]
            \[NO-PACKAGES]
            \[EXTRA]"))

(org-agenda-to-appt)

(setq org-agenda-custom-commands
      `(
        ;; Week agenda for rendez-vous and tasks
        ("%" "Rendez-vous" agenda* "Week RDV"
         ((org-agenda-span 'week)
          (org-agenda-files '("~/org/rdv.org"))
          ;; (org-deadline-warning-days 3)
          (org-agenda-sorting-strategy
           '(todo-state-up time-up priority-down))))

	(" " "Work (tout)"
	 ((agenda "List of rendez-vous and tasks for today"
		   ((org-agenda-span 1)
		    (org-agenda-files '("~/org/rdv.org" "~/org/bzg.org"))
		    (org-deadline-warning-days 3)
		    (org-agenda-sorting-strategy
		     '(todo-state-up time-up priority-down))))
	  (todo "STRT"
		((org-agenda-files '("~/org/bzg.org"))
		 (org-agenda-sorting-strategy '(timestamp-up))))
	  (todo "NEXT"
		((org-agenda-files '("~/org/bzg.org"))
		 (org-agenda-sorting-strategy '(timestamp-up))))
	  ))
	
	("	" "Libre (tout)"
	 ((agenda "List of rendez-vous and tasks for today"
		   ((org-agenda-span 1)
		    (org-agenda-files '("~/org/rdv.org" "~/org/libre.org" "~/org/garden.org"))
		    (org-deadline-warning-days 3)
		    (org-agenda-sorting-strategy
		     '(todo-state-up priority-down time-up))))
	  (todo "STRT"
		((org-agenda-files '("~/org/rdv.org" "~/org/libre.org" "~/org/garden.org"))
		 (org-agenda-sorting-strategy '(timestamp-up))))
	  (todo "NEXT"
		((org-agenda-files '("~/org/rdv.org" "~/org/libre.org" "~/org/garden.org"))
		 (org-agenda-sorting-strategy '(timestamp-up))))
	  ))

	("!" tags-todo "+DEADLINE<=\"<now>\"")
        ("@" tags-todo "+SCHEDULED<=\"<now>\"")
	("?" "WAIT (bzg)" tags-todo "TODO={WAIT}"
	 ((org-agenda-files '("~/org/rdv.org" "~/org/bzg.org"))))

        ("z" "Work deadlines" agenda "Past/upcoming work deadlines"
         ((org-agenda-span 1)
          (org-deadline-warning-days 15)
          (org-agenda-entry-types '(:deadline))
          (org-agenda-sorting-strategy
           '(todo-state-up priority-down time-up))))
	("x" "Agenda work" agenda "Work scheduled for today"
	 ((org-agenda-span 1)
	  (org-deadline-warning-days 3)
          (org-agenda-entry-types '(:timestamp :scheduled))
          (org-agenda-sorting-strategy
           '(todo-state-up priority-down time-up))))
	("Z" "Libre deadlin." agenda "Past/upcoming leisure deadlines"
         ((org-agenda-span 1)
          (org-deadline-warning-days 15)
	  (org-agenda-files '("~/org/libre.org" "~/org/garden.org"))
          (org-agenda-entry-types '(:deadline))
          (org-agenda-sorting-strategy
           '(todo-state-up priority-down time-up))))
	("X" "Agenda libre" agenda "Libre scheduled for today"
	 ((org-agenda-span 1)
	  (org-deadline-warning-days 3)
	  (org-agenda-files '("~/org/libre.org" "~/org/garden.org"))
          (org-agenda-entry-types '(:timestamp :scheduled))
          (org-agenda-sorting-strategy
           '(todo-state-up priority-down time-up))))

        ("r" tags-todo "+Read+TODO={NEXT}" nil)
        ("R" tags-todo "+Read+TODO={NEXT}"
	 ((org-agenda-files '("~/org/libre.org" "~/org/garden.org"))
	  (org-agenda-max-entries 50)))
	("v" tags-todo "+View+TODO={NEXT}" nil)
	("V" tags-todo "+View+TODO={NEXT}"
	 ((org-agenda-files '("~/org/libre.org" "~/org/garden.org"))))
	("w" tags-todo "+Write+TODO={NEXT}" nil)
	("W" tags-todo "+Write+TODO={NEXT}"
	 ((org-agenda-files '("~/org/libre.org" "~/org/garden.org"))))

	("#" "DONE/CANCELED"
         todo "DONE|CANCELED"
	 ((org-agenda-files '("~/org/bzg.org" "~/org/rdv.org" "~/org/libre.org"))
	  (org-agenda-sorting-strategy '(timestamp-up))))
        ))

(setq org-capture-templates
      '((" " "Misc" entry (file "~/org/bzg.org")
         "* TODO %a\n  :PROPERTIES:\n  :CAPTURED: %U\n  :END:\n\n%i%?"
         :prepend t :immediate-finish t)

        ("	" "Misc (clock-in)" entry (file "~/org/bzg.org")
         "* TODO %a\n  :PROPERTIES:\n  :CAPTURED: %U\n  :END:\n\n%i%?"
         :prepend t :immediate-finish t :clock-in t :clock-keep t)

        ("c" "Misc (edit)" entry (file "~/org/bzg.org")
         "* TODO %a\n  :PROPERTIES:\n  :CAPTURED: %U\n  :END:\n\n%i%?"
         :prepend t)

        ("r" "Bzg RDV" entry (file+headline "~/org/rdv.org" "RDV")
         "* RDV %:fromname\n  :PROPERTIES:\n  :CAPTURED: %U\n  :END:\n\n%a%i%?" :prepend t)

        ("R" "Bzg RDV" entry (file+headline "~/org/rdv.org" "RDV")
         "* %a\n  :PROPERTIES:\n  :CAPTURED: %U\n  :END:\n\n%i%?" :prepend t)

        ("g" "Garden" entry (file+headline "~/org/garden.org" "Garden")
         "* TODO %?%a\n  :PROPERTIES:\n  :CAPTURED: %U\n  :END:\n\n%i" :prepend t)

        ("e" "Emacs" entry (file+headline "~/org/libre.org" "Emacs")
         "* TODO %?%a\n  :PROPERTIES:\n  :CAPTURED: %U\n  :END:\n\n%i" :prepend t)

        ("o" "Org")
        ("of" "Org FR" entry (file+olp "~/org/libre.org" "Org-mode" "Features")
         "* TODO %?%a :Code:\n  :PROPERTIES:\n  :CAPTURED: %U\n  :END:\n\n%^{OrgVersion}p%i" :prepend t)
        ("ob" "Org Bug" entry (file+olp "~/org/libre.org" "Org-mode" "To fix")
         "* NEXT %?%a :Bug:\n  :PROPERTIES:\n  :CAPTURED: %U\n  :END:\n\n%^{OrgVersion}p%i" :prepend t)
        ("op" "Org Patch" entry (file+olp "~/org/libre.org" "Org-mode" "Patches")
         "* NEXT [#A] %?%a :Patch:\n  :PROPERTIES:\n  :CAPTURED: %U\n  :END:\n\n%^{OrgVersion}p%i" :prepend t)
        ("ow" "Worg" entry (file+olp "~/org/libre.org" "Org-mode" "Worg")
         "* TODO [#A] %?%a :Worg:\n  :PROPERTIES:\n  :CAPTURED: %U\n  :END:\n\n%i" :prepend t)))

(setq html-preamble
"
<script type=\"text/javascript\"src=\"//platform.twitter.com/widgets.js\"></script>
<div id=\"menu\">
<a class=\"top\" href=\"http://bzg.fr\">bzg</a>
<a href=\"/blog.html\">Blog</a>
<a href=\"http://bzg.fr/talks.html\">Talks</a>
<a href=\"/about.html\">About</a>
</div>
<div id=\"share\">
<a href=\"https://twitter.com/share\" class=\"twitter-share-button\" align=\"right\" data-count=\"horizontal\" data-via=\"bzg2\">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
<br/>
<a href=\"https://twitter.com/bzg2\" class=\"twitter-follow-button\" data-show-count=\"false\">Follow @bzg2</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</div>")

(setq html-dll-preamble
"<script>
    \(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    \(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    ga('create', 'UA-42064173-1', 'dunlivrelautre.net');
    ga('send', 'pageview');
</script>

<div class=\"toprightbutton\">
<a href=\"blog.xml\"><img alt=\"RSS\" width=\"70px\" src=\"u/rss.jpg\" /></a>
</div>

<div class=\"topleftbutton\">

<a href=\"/index.html\">Home</a><br/>

<a href=\"http://flattr.com/thing/1654106/Dun-Livre-Lautre\" target=\"new\"><img src=\"http://api.flattr.com/button/flattr-badge-large.png\" alt=\"Flattr this\" title=\"Flattr this\" border=\"0\" /></a><br/>

<a href=\"https://twitter.com/share\" class=\"twitter-share-button\"
data-count=\"none\" data-via=\"bzg2\" data-lang=\"fr\">Tweeter</a><script
type=\"text/javascript\" src=\"//platform.twitter.com/widgets.js\"></script>

</div>

<div class=\"bottomrightbutton\">
<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png\" /></a>
</div>")

(setq org-publish-project-alist
      `(
        ("homepage"
         :base-directory "~/install/git/homepage/"
         :html-extension "html"
         :base-extension "org"
         :publishing-directory "/home/guerry/public_html/org/homepage/"
         :publishing-function (org-html-publish-to-html)
         :auto-sitemap nil
         :recursive t
         :makeindex t
         :preserve-breaks nil
         :sitemap-sort-files chronologically
         :with-tasks nil
         :section-numbers nil
         :with-toc nil
         :html-head-extra
         "<link rel=\"alternate\" type=\"application/rss+xml\" href=\"http://bzg.fr/blog.xml\" title=\"RSS feed for bzg.fr\">
<link rel=\"stylesheet\" href=\"u/bootstrap.min.css\" />
<link rel=\"stylesheet\" href=\"index.css\" type=\"text/css\" />"
         :html-preamble ,html-preamble
	 :html-postamble nil
         :htmlized-source t)
        ("homepage-rss"
         :base-directory "~/install/git/homepage/"
         :base-extension "org"
         :html-link-home "http://bzg.fr/"
         :publishing-directory "/home/guerry/public_html/org/homepage/"
         :publishing-function (org-rss-publish-to-rss)
         :html-link-use-abs-url t
         :section-numbers nil
         :exclude ".*"
         :with-tasks nil
         :include ("blog.org")
         :with-toc nil)
        ("homepage-css"
         :base-directory "~/install/git/homepage"
         :base-extension "css"
         :publishing-directory "/home/guerry/public_html/org/homepage/"
         :publishing-function org-publish-attachment)
        ("homepage-attachments"
         :base-directory "~/install/git/homepage"
         :base-extension "png\\|jpg\\|gif\\|atom"
         :publishing-directory "/home/guerry/public_html/org/homepage/u/"
         :publishing-function org-publish-attachment)
        ("dotemacs"
         :base-directory "~/install/git/dotemacs/"
         :html-extension "html"
         :base-extension "org"
         :publishing-directory "/home/guerry/public_html/org/homepage/"
         :publishing-function (org-html-publish-to-html)
         :auto-sitemap nil
         :recursive t
         :makeindex nil
         :preserve-breaks nil
         :sitemap-sort-files chronologically
         :section-numbers nil
         :with-toc nil
         :html-head-extra
         "<link rel=\"stylesheet\" href=\"u/bootstrap.min.css\" />
<link rel=\"stylesheet\" href=\"index.css\" type=\"text/css\" />"
         :html-preamble ,html-preamble
	 :html-postamble nil
         :htmlized-source nil)
        ("dll"
         :base-directory "~/install/git/dunlivrelautre/"
         :html-extension "html"
         :base-extension "org"
         :publishing-directory "/home/guerry/public_html/org/dunlivrelautre/"
         :publishing-function (org-html-publish-to-html)
         :auto-sitemap nil
         :recursive t
         :with-tasks nil
         :makeindex t
         :preserve-breaks nil
         :sitemap-sort-files chronologically
         :section-numbers nil
         :with-toc nil
         :html-head-extra "<link rel=\"stylesheet\" href=\"index.css\" type=\"text/css\" />"
         :htmlized-source nil
         :html-preamble ,html-dll-preamble
	 :html-postamble nil)
        ("dll-rss"
         :base-directory "~/install/git/dunlivrelautre/"
         :base-extension "org"
         :html-link-home "http://www.dunlivrelautre.net"
         :publishing-directory "/home/guerry/public_html/org/dunlivrelautre/"
         :publishing-function (org-rss-publish-to-rss)
         :html-link-use-abs-url t
         :section-numbers nil
         :exclude ".*"
         :include ("blog.org")
         :with-tasks nil
         :with-toc nil)
        ("dll-css"
         :base-directory "~/install/git/dunlivrelautre"
         :base-extension "css"
         :publishing-directory "/home/guerry/public_html/org/dunlivrelautre/"
         :publishing-function org-publish-attachment)
        ("dll-attachments"
         :base-directory "~/install/git/dunlivrelautre"
         :base-extension "png\\|jpg\\|gif\\|xml\\|atom"
         :publishing-directory "/home/guerry/public_html/org/dunlivrelautre/"
         :publishing-function org-publish-attachment)
        ;; Meta projects
        ("hp" :components
         ("homepage" "homepage-attachments" "homepage-rss" "homepage-css"))
        ("dll" :components ("dll" "dll-attachments" "dll-rss"))
        ))

(defun my-org-html-export-planning (planning-string backend info)
  (when (string-match "<p>.+><\\([0-9]+-[0-9]+-[0-9]+\\)[^>]+><.+</p>" planning-string)
    (concat "<span class=\"planning\">" (match-string 1 planning-string) "</span>")))

;; org caldav
(require 'org-caldav)
(setq org-caldav-inbox "~/org/rdv.org")
(setq org-caldav-calendar-id "personnel")
(setq org-caldav-url "https://box.bzg.io/cloud/remote.php/caldav/calendars/bzg%40bzg.fr")
(setq org-caldav-files nil)
#+END_SRC

* notmuch

#+BEGIN_SRC emacs-lisp
;; notmuch configuration
(require 'notmuch)
(setq notmuch-fcc-dirs nil)
(add-hook 'gnus-group-mode-hook 'bzg-notmuch-shortcut)

(defun bzg-notmuch-shortcut ()
  (define-key gnus-group-mode-map "GG" 'notmuch-search))

(defun bzg-notmuch-file-to-group (file)
  "Calculate the Gnus group name from the given file name."
  (cond ((string-match "/home/guerry/Maildir/Mail/mail/\\([^/]+\\)/" file)
	 (format "nnml:mail.%s" (match-string 1 file)))
	((string-match "/home/guerry/Maildir/\\([^/]+\\)/\\([^/]+\\)" file)
	 (format "nnmaildir+%s:%s" (match-string 1 file) (match-string 2 file)))
	(t (user-error "Unknown group"))))

(defun bzg-notmuch-goto-message-in-gnus ()
  "Open a summary buffer containing the current notmuch
article."
  (interactive)
  (let ((group (bzg-notmuch-file-to-group (notmuch-show-get-filename)))
        (message-id (replace-regexp-in-string
                     "^id:" "" (notmuch-show-get-message-id))))
    (setq message-id (replace-regexp-in-string "\"" "" message-id))
    (if (and group message-id)
        (progn
          (switch-to-buffer "*Group*")
          (org-gnus-follow-link group message-id))
      (message "Couldn't get relevant infos for switching to Gnus."))))

(define-key notmuch-show-mode-map (kbd "C-c C-c") 'bzg-notmuch-goto-message-in-gnus)

(define-key global-map (kbd "<M-f1>") (lambda()(interactive) (notmuch-search "tag:flagged")))
(define-key global-map (kbd "<S-f1>") (lambda()(interactive) (notmuch-search "tag:unread")))
#+END_SRC

* Gnus

#+BEGIN_SRC emacs-lisp
;; Gnus configuration
(setq nnml-directory "~/Maildir/Mail/")

(setq gnus-ignored-from-addresses
      (regexp-opt '("bastien.guerry@ens.fr"
                    "bastien.guerry@free.fr"
		    "bastien.guerry@aful.org"
                    "bastien@olpc-france.org"
		    "bzg@latelierliban.net"
                    "bastienguerry@gmail.com"
                    "bzg@kickhub.com"
		    "hackadon@librefunding.org"
		    "bastien@hackadon.org"
		    "contact@hackadon.org"
		    "contact+projet@hackadon.org"
		    "bzg+emacs@bzg.fr"
		    "bguerry@ceis-strat.com"
		    "bzg@bzg.io"
		    "bzg@bzg.fr"
		    "bzg+wiki@bzg.fr"
		    "bzg+olpc@bzg.fr"
                    "bzg@librefunding.org"
                    "bzg@jecode.org"
                    "bastienguerry@googlemail.com"
                    "bastien1@free.fr"
                    "bzg@altern.org"
                    "bzg@gnu.org"
                    "bzg@laptop.org"
                    "bastien.guerry@u-paris10.fr"
                    "bastienguerry@hotmail.com"
                    "bastienguerry@yahoo.fr"
                    "b.guerry@philosophy.bbk.ac.uk"
                    "castle@philosophy.bbk.ac.uk"
		    "noreply"
		    "bzg@digited.net"
		    "bastien@sharelex.org"
		    )))

(require 'message)
(require 'gnus)
(require 'starttls)
(require 'epg)
(require 'epa)
;; (require 'smtpmail)
(require 'boxquote)
(require 'ecomplete)
(require 'gnus-gravatar)

;; Use electric completion in Gnus
(setq message-mail-alias-type 'ecomplete)
(setq epa-popup-info-window nil)
(setq smiley-style 'medium)

(setq send-mail-function 'sendmail-send-it)
(setq message-send-mail-function 'message-send-mail-with-sendmail)
;; (setq mail-header-separator "----")
(setq mail-use-rfc822 t)

(setq message-cite-function (quote message-cite-original-without-signature))

;; Attachments
(setq mm-content-transfer-encoding-defaults
      (quote
       (("text/x-patch" 8bit)
        ("text/.*" 8bit)
        ("message/rfc822" 8bit)
        ("application/emacs-lisp" 8bit)
        ("application/x-emacs-lisp" 8bit)
        ("application/x-patch" 8bit)
        (".*" base64))))

(setq mm-url-program 'w3m)
(setq mm-url-use-external nil)

(setq nnmail-extra-headers
      '(X-Diary-Time-Zone X-Diary-Dow X-Diary-Year
        X-Diary-Month X-Diary-Dom X-Diary-Hour X-Diary-Minute To Newsgroups Cc))

;; Sources and methods
(setq mail-sources nil
      gnus-select-method '(nnmaildir "Bastien" (directory "~/Maildir"))
      gnus-secondary-select-methods
      '(;; (nnml "")
	(nnmaildir "bzgfr" (directory "~/Maildir/bzgfr"))
	(nnmaildir "bzgfrio" (directory "~/Maildir/bzgfrio"))
	(nnmaildir "free" (directory "~/Maildir/free"))
	;; (nnmaildir "digited" (directory "~/Maildir/digited"))
	;; (nnmaildir "gmail" (directory "~/Maildir/gmail"))
	;; (nnmaildir "hackadon" (directory "~/Maildir/hackadon"))
	;; (nnmaildir "hackadon-contact" (directory "~/Maildir/hackadon-contact"))
	;; (nnmaildir "latelierliban" (directory "~/Maildir/latelierliban"))
	;; (nnmaildir "ceis" (directory "~/Maildir/ceis"))
	;; Serveurs de news :
	;; (nntp "news" (nntp-address "news.gmane.org"))
	;; (nntp "free" (nntp-address "news.free.fr"))
	))

(setq gnus-check-new-newsgroups nil)
(setq gnus-thread-ignore-subject nil)

(setq read-mail-command 'gnus
      gnus-asynchronous t
      gnus-directory "~/News/"
      gnus-gcc-mark-as-read t
      gnus-inhibit-startup-message t
      gnus-interactive-catchup nil
      gnus-interactive-exit nil
      gnus-large-newsgroup 10000
      gnus-no-groups-message ""
      gnus-novice-user nil
      gnus-play-startup-jingle nil
      gnus-show-all-headers nil
      gnus-use-bbdb t
      gnus-use-correct-string-widths nil
      gnus-use-cross-reference nil
      gnus-verbose 6
      mail-specify-envelope-from t
      mail-envelope-from 'header
      message-sendmail-envelope-from 'header
      mail-user-agent 'gnus-user-agent
      message-fill-column 70
      message-kill-buffer-on-exit t
      message-mail-user-agent 'gnus-user-agent
      message-use-mail-followup-to nil
      nnimap-expiry-wait 'never
      nnmail-crosspost nil
      nnmail-expiry-target "nnml:expired"
      nnmail-expiry-wait 'never
      nnmail-split-methods 'nnmail-split-fancy
      nnmail-treat-duplicates 'delete)

(setq gnus-subscribe-newsgroup-method 'gnus-subscribe-interactively
      gnus-group-default-list-level 6 ; 3
      gnus-level-default-subscribed 3
      gnus-level-default-unsubscribed 7
      gnus-level-subscribed 6
      gnus-activate-level 6
      gnus-level-unsubscribed 7)

(setq nnir-notmuch-remove-prefix "/home/guerry/Maildir/")
(setq nnir-method-default-engines
      '((nnmaildir . notmuch)
	;; (nntp . gmane) FIXME: Gmane is broken for now
	))

(setq message-dont-reply-to-names gnus-ignored-from-addresses)
(setq message-alternative-emails gnus-ignored-from-addresses)

(defun my-gnus-message-archive-group (group-current)
  "Return prefered archive group."
  (let (; (group-plain (replace-regexp-in-string "^.*:" "" group-current))
	(group-prefix (replace-regexp-in-string "[^:]+$" "" group-current)))
    (cond
     ((string-match "bzgio" group-prefix)
      (concat group-prefix "sent"))
     ((or (string-match "latelierliban" group-prefix)
	  (string-match "digited" group-prefix)
	  (string-match "hackadon" group-prefix)
	  (string-match "bzgfrio" group-prefix)
	  (string-match "bzgfr" group-prefix))
      (concat group-prefix "Sent"))
     ;; Followup to news:
     ((message-news-p)
      (concat "nnfolder+archive:" (format-time-string "%Y-%m")
	      "-divers-news"))
     (t "nnmaildir+bzgfr:sent"))))

(setq gnus-message-archive-group 'my-gnus-message-archive-group)

;; Delete mail backups older than 1 days
(setq mail-source-delete-incoming 1)

;; Group sorting
(setq gnus-group-sort-function
      '(gnus-group-sort-by-unread
	gnus-group-sort-by-rank
        ;; gnus-group-sort-by-score
        ;; gnus-group-sort-by-level
        ;; gnus-group-sort-by-alphabet
	))

(add-hook 'gnus-summary-exit-hook 'gnus-summary-bubble-group)
(add-hook 'gnus-suspend-gnus-hook 'gnus-group-sort-groups-by-rank)
(add-hook 'gnus-exit-gnus-hook 'gnus-group-sort-groups-by-rank)

;; Display the thread by default
(setq gnus-thread-hide-subtree nil)

;; Headers we wanna see:
(setq gnus-visible-headers
      "^From:\\|^Subject:\\|^X-Mailer:\\|^X-Newsreader:\\|^Date:\\|^To:\\|^Cc:\\|^User-agent:\\|^Newsgroups:\\|^Comments:")

;;; Sort mails
(setq nnmail-split-abbrev-alist
      '((any . "From\\|To\\|Cc\\|Sender\\|Apparently-To\\|Delivered-To\\|X-Apparently-To\\|Resent-From\\|Resent-To\\|Resent-Cc")
        (mail . "Mailer-Daemon\\|Postmaster\\|Uucp")
        (to . "To\\|Cc\\|Apparently-To\\|Resent-To\\|Resent-Cc\\|Delivered-To\\|X-Apparently-To")
        (from . "From\\|Sender\\|Resent-From")
        (nato . "To\\|Cc\\|Resent-To\\|Resent-Cc\\|Delivered-To\\|X-Apparently-To")
        (naany . "From\\|To\\|Cc\\|Sender\\|Resent-From\\|Resent-To\\|Delivered-To\\|X-Apparently-To\\|Resent-Cc")))

;; Simplify the subject lines
(setq gnus-simplify-subject-functions
      '(gnus-simplify-subject-re
        gnus-simplify-whitespace))

;; Display faces
(setq gnus-treat-display-face 'head)

;; Thread by Xref, not by subject
(setq gnus-thread-ignore-subject t)
(setq gnus-summary-thread-gathering-function
      'gnus-gather-threads-by-references)

;; Dispkay a button for MIME parts
(setq gnus-buttonized-mime-types '("multipart/alternative"))

;; Use w3m to display HTML mails
(setq mm-text-html-renderer 'gnus-w3m
      mm-inline-text-html-with-images t
      mm-inline-large-images nil
      mm-attachment-file-modes 420)

;; Avoid spaces when saving attachments
(setq mm-file-name-rewrite-functions
      '(mm-file-name-trim-whitespace
        mm-file-name-collapse-whitespace
        mm-file-name-replace-whitespace))

(setq gnus-user-date-format-alist
      '(((gnus-seconds-today) . "     %k:%M")
        ((+ 86400 (gnus-seconds-today)) . "hier %k:%M")
        ((+ 604800 (gnus-seconds-today)) . "%a  %k:%M")
        ((gnus-seconds-month) . "%a  %d")
        ((gnus-seconds-year) . "%b %d")
        (t . "%b %d '%y")))

;; Add a time-stamp to a group when it is selected
(add-hook 'gnus-select-group-hook 'gnus-group-set-timestamp)

;; Format group line
(setq gnus-group-line-format "%M\%S\%p\%P %(%-40,40g%)\n")

(setq gnus-topic-indent-level 3)

(defun bzg-gnus-toggle-group-line-format ()
  (interactive)
  (if (equal gnus-group-line-format
             "%M\%S\%p\%P %(%-40,40g%) %-3y %-3T %-3I\n")
      (setq gnus-group-line-format
             "%M\%S\%p\%P %(%-40,40g%)\n")
    (setq gnus-group-line-format
          "%M\%S\%p\%P %(%-40,40g%) %-3y %-3T %-3I\n")))

;; Toggle the group line format
(define-key gnus-group-mode-map "x"
  (lambda () (interactive) (bzg-gnus-toggle-group-line-format) (gnus)))

(define-key gnus-summary-mode-map "$" 'gnus-summary-mark-as-spam)

;; Scoring
(setq gnus-use-adaptive-scoring 'line
      ;; gnus-score-expiry-days 14
      gnus-default-adaptive-score-alist
      '((gnus-dormant-mark (from 20) (subject 100))
        (gnus-ticked-mark (subject 30))
        (gnus-read-mark (subject 30))
        (gnus-del-mark (subject -150))
        (gnus-catchup-mark (subject -150))
        (gnus-killed-mark (subject -1000))
        (gnus-expirable-mark (from -1000) (subject -1000)))
      gnus-score-decay-constant 1    ;default = 3
      gnus-score-decay-scale 0.03    ;default = 0.05
      gnus-decay-scores t)           ;(gnus-decay-score 1000)

;; Prompt for the right group
(setq gnus-group-jump-to-group-prompt
      '((1 . "nnmaildir+bzgfr:sent")))

(setq gnus-summary-line-format
      (concat "%*%0{%U%R%z%}"
              "%0{ %}(%2t)"
              "%2{ %}%-23,23n"
              "%1{ %}%1{%B%}%2{%-102,102s%}%-140="
              "\n"))

;; Highlight my name in messages
(add-to-list 'gnus-emphasis-alist
	     '("Bastien\\|bzg" 0 0 gnus-emphasis-highlight-words))

;; Hack to store Org links upon sending Gnus messages

(defun bzg-message-send-and-org-gnus-store-link (&optional arg)
  "Send message with `message-send-and-exit' and store org link to message copy.
If multiple groups appear in the Gcc header, the link refers to
the copy in the last group."
  (interactive "P")
    (save-excursion
      (save-restriction
        (message-narrow-to-headers)
        (let ((gcc (car (last
                         (message-unquote-tokens
                          (message-tokenize-header
                           (mail-fetch-field "gcc" nil t) " ,")))))
              (buf (current-buffer))
              (message-kill-buffer-on-exit nil)
              id to from subject desc link newsgroup xarchive)
        (message-send-and-exit arg)
        (or
         ;; gcc group found ...
         (and gcc
              (save-current-buffer
                (progn (set-buffer buf)
                       (setq id (org-remove-angle-brackets
                                 (mail-fetch-field "Message-ID")))
                       (setq to (mail-fetch-field "To"))
                       (setq from (mail-fetch-field "From"))
                       (setq subject (mail-fetch-field "Subject"))))
              (org-store-link-props :type "gnus" :from from :subject subject
                                    :message-id id :group gcc :to to)
              (setq desc (org-email-link-description))
              (setq link (org-gnus-article-link
                          gcc newsgroup id xarchive))
              (setq org-stored-links
                    (cons (list link desc) org-stored-links)))
         ;; no gcc group found ...
         (message "Can not create Org link: No Gcc header found."))))))

(define-key message-mode-map [(control c) (control meta c)]
  'bzg-message-send-and-org-gnus-store-link)

;; To install:
(require 'gnus-icalendar)
(gnus-icalendar-setup)

;; To enable optional iCalendar->Org sync functionality
;; NOTE: both the capture file and the headline(s) inside must already exist
(setq gnus-icalendar-org-capture-file "~/org/rdv.org")
(setq gnus-icalendar-org-capture-headline '("RDV"))
(gnus-icalendar-org-setup)

(require 'gnus-dired)
;; Make the `gnus-dired-mail-buffers' function also work on
;; message-mode derived modes, such as mu4e-compose-mode
(defun gnus-dired-mail-buffers ()
  "Return a list of active message buffers."
  (let (buffers)
    (save-current-buffer
      (dolist (buffer (buffer-list t))
     	(set-buffer buffer)
     	(when (and (derived-mode-p 'message-mode)
		   (null message-sent-message-via))
     	  (push (buffer-name buffer) buffers))))
    (nreverse buffers)))
#+END_SRC

* BBDB

#+BEGIN_SRC emacs-lisp
(setq bbdb-file "~/elisp/config/bbdb")

(require 'bbdb)
(require 'bbdb-loaddefs)
(require 'bbdb-com)
(require 'bbdb-anniv)
(require 'bbdb-gnus)

(bbdb-initialize 'message 'gnus)
(bbdb-mua-auto-update-init 'message 'gnus)

(setq bbdb-pop-up-window-size 5)
(setq bbdb-update-records-p 'create)
(setq bbdb-allow-duplicates t)
(setq bbdb-mua-pop-up nil)
(setq bbdb-mua-update-interactive-p '(create . query))
(setq bbdb-mua-auto-update-p t)
(add-to-list 'bbdb-mua-mode-alist '(message mu4e-compose-mode))

(add-hook 'bbdb-change-hook 'bbdb-timestamp)
(add-hook 'bbdb-create-hook 'bbdb-creation-date)
(add-hook 'bbdb-notice-mail-hook 'bbdb-auto-notes)
;; (add-hook 'list-diary-entries-hook 'bbdb-include-anniversaries)

(setq bbdb-always-add-addresses t
      bbdb-complete-name-allow-cycling t
      bbdb-completion-display-record t
      bbdb-default-area-code nil
      bbdb-dwim-net-address-allow-redundancy t
      bbdb-electric-p nil
      bbdb-new-nets-always-primary 'never
      bbdb-north-american-phone-numbers-p nil
      bbdb-offer-save 'auto
      bbdb-pop-up-target-lines 3
      bbdb-print-net 'primary
      bbdb-print-require t
      bbdb-use-pop-up nil
      bbdb-user-mail-names gnus-ignored-from-addresses
      bbdb/gnus-split-crosspost-default nil
      bbdb/gnus-split-default-group nil
      bbdb/gnus-split-myaddr-regexp gnus-ignored-from-addresses
      bbdb/gnus-split-nomatch-function nil
      bbdb/gnus-summary-known-poster-mark "+"
      bbdb/gnus-summary-mark-known-posters t
      bbdb-ignore-message-alist '(("Newsgroup" . ".*")))

(defalias 'bbdb-y-or-n-p '(lambda (prompt) t))

(setq bbdb-auto-notes-alist
      `(("Newsgroups" ("[^,]+" newsgroups 0))
        ("Subject" (".*" last-subj 0 t))
        ("User-Agent" (".*" mailer 0))
        ("X-Mailer" (".*" mailer 0))
        ("Organization" (".*" organization 0))
        ("X-Newsreader" (".*" mailer 0))
        ("X-Face" (".+" face 0 'replace))
        ("Face" (".+" face 0 'replace))))
#+END_SRC

* ERC

#+BEGIN_SRC emacs-lisp
(require 'erc)
(require 'erc-services)

;; highlight notifications in ERC
(font-lock-add-keywords
 'erc-mode
 '((";;.*\\(bzg2\\|éducation\\|clojure\\|emacs\\|orgmode\\)"
    (1 bzg-todo-comment-face t))))

(setq erc-modules '(autoaway autojoin irccontrols log netsplit noncommands
                             notify pcomplete completion ring services stamp
                             track truncate)
      erc-keywords nil
      erc-prompt-for-nickserv-password nil
      erc-timestamp-format "%s "
      erc-hide-timestamps t
      erc-log-channels t
      erc-log-write-after-insert t
      erc-log-insert-log-on-open nil
      erc-save-buffer-on-part t
      erc-input-line-position 0
      erc-fill-function 'erc-fill-static
      erc-fill-static-center 0
      erc-fill-column 130
      erc-insert-timestamp-function 'erc-insert-timestamp-left
      erc-insert-away-timestamp-function 'erc-insert-timestamp-left
      erc-whowas-on-nosuchnick t
      erc-public-away-p nil
      erc-save-buffer-on-part t
      erc-echo-notice-always-hook '(erc-echo-notice-in-minibuffer)
      erc-auto-set-away nil
      erc-autoaway-message "%i seconds out..."
      erc-away-nickname "bz_g"
      erc-kill-queries-on-quit nil
      erc-kill-server-buffer-on-quit t
      erc-log-channels-directory "~/.erc_log"
      ;; erc-enable-logging 'erc-log-all-but-server-buffers
      erc-enable-logging t
      erc-query-on-unjoined-chan-privmsg t
      erc-auto-query 'window-noselect
      erc-server-coding-system '(utf-8 . utf-8)
      erc-encoding-coding-alist '(("#emacs" . utf-8)
                                  ("#frlab" . iso-8859-1)
                                  ("&bitlbee" . utf-8)))

(defun erc-notify-on-msg (msg)
  (if (string-match "bz_g:" msg)
      (shell-command (concat "notify-send \"" msg "\""))))
(add-hook 'erc-insert-pre-hook 'erc-notify-on-msg)

(defun bzg-erc-connect-bitlbee ()
  "Connect to &bitlbee channel with ERC."
  (interactive)
  (erc-select :server "bzg"
              :port 6667
              :nick "bz_g"
              :full-name "Bastien"))

(defun bzg-erc-connect-freenode ()
  "Connect to Freenode server with ERC."
  (interactive)
  (erc-select :server "irc.freenode.net"
              :port 6666
              :nick "bz_g"
              :full-name "Bastien"))

(add-hook 'erc-mode-hook
          '(lambda ()
             (auto-fill-mode -1)
             (pcomplete-erc-setup)
             (erc-completion-mode 1)
             (erc-ring-mode 1)
             (erc-log-mode 1)
             (erc-netsplit-mode 1)
             (erc-button-mode -1)
             (erc-match-mode 1)
             (erc-autojoin-mode 1)
             (erc-nickserv-mode 1)
             (erc-timestamp-mode 1)
             (erc-services-mode 1)))

;; This contains my passwords
(load "/home/guerry/elisp/config/erc_.el")
#+END_SRC

* w3m

#+BEGIN_SRC emacs-lisp
;; w3m configuration
(setq w3m-accept-languages '("fr;" "q=1.0" "en;"))
(setq w3m-antenna-sites '(("http://eucd.info" "EUCD.INFO" time)))
(setq w3m-broken-proxy-cache t)
(setq w3m-confirm-leaving-secure-page nil)
(setq w3m-cookie-accept-bad-cookies nil)
(setq w3m-cookie-accept-domains nil)
(setq w3m-cookie-file "/home/guerry/.w3m/cookie")
(setq w3m-fill-column 70)
(setq w3m-form-textarea-edit-mode 'org-mode)
(setq w3m-icon-directory nil)
(setq w3m-key-binding 'info)
(setq w3m-use-cookies t)
(setq w3m-use-tab t)
(setq w3m-use-toolbar nil)
#+END_SRC

* Calendar

#+BEGIN_SRC emacs-lisp
(setq french-holiday
      '((holiday-fixed 1 1 "Jour de l'an")
        (holiday-fixed 5 8 "Victoire 45")
        (holiday-fixed 7 14 "Fête nationale")
        (holiday-fixed 8 15 "Assomption")
        (holiday-fixed 11 1 "Toussaint")
        (holiday-fixed 11 11 "Armistice 18")
        (holiday-easter-etc 1 "Lundi de Pâques")
        (holiday-easter-etc 39 "Ascension")
        (holiday-easter-etc 50 "Lundi de Pentecôte")
        (holiday-fixed 1 6 "Épiphanie")
        (holiday-fixed 2 2 "Chandeleur")
        (holiday-fixed 2 14 "Saint Valentin")
        (holiday-fixed 5 1 "Fête du travail")
        (holiday-fixed 5 8 "Commémoration de la capitulation de l'Allemagne en 1945")
        (holiday-fixed 6 21 "Fête de la musique")
        (holiday-fixed 11 2 "Commémoration des fidèles défunts")
        (holiday-fixed 12 25 "Noël")
        ;; fêtes à date variable
        (holiday-easter-etc 0 "Pâques")
        (holiday-easter-etc 49 "Pentecôte")
        (holiday-easter-etc -47 "Mardi gras")
        (holiday-float 6 0 3 "Fête des pères") ;; troisième dimanche de juin
        ;; Fête des mères
        (holiday-sexp
         '(if (equal
               ;; Pentecôte
               (holiday-easter-etc 49)
               ;; Dernier dimanche de mai
               (holiday-float 5 0 -1 nil))
              ;; -> Premier dimanche de juin si coïncidence
              (car (car (holiday-float 6 0 1 nil)))
            ;; -> Dernier dimanche de mai sinon
            (car (car (holiday-float 5 0 -1 nil))))
         "Fête des mères")))

(setq calendar-date-style 'european
      calendar-holidays (append french-holiday)
      calendar-mark-holidays-flag t
      calendar-week-start-day 1
      calendar-mark-diary-entries-flag nil)

(setq TeX-master 'dwim)
#+END_SRC

* fringe

#+BEGIN_SRC emacs-lisp
;; Hide fringe indicators
(mapcar (lambda(fb) (set-fringe-bitmap-face fb 'org-hide))
        fringe-bitmaps)

(setq fringe-styles
      '(("default" . nil)
	("no-fringes" . 0)
	("right-only" . (0 . nil))
	("left-only" . (nil . 0))
	("half-width" . (4 . 4))
	("big" . (400 . 400))
	("300" . (300 . 300))
	("bzg" . (200 . 200))
	("minimal" . (1 . 1))))

(defvar bzg-big-fringe-mode nil)
(define-minor-mode bzg-big-fringe-mode
  "Minor mode to hide the mode-line in the current buffer."
  :init-value nil
  :global t
  :variable bzg-big-fringe-mode
  :group 'editing-basics
  (if (not bzg-big-fringe-mode)
      (set-fringe-mode 10)
    (set-fringe-mode 200)))

;; See http://bzg.fr/emacs-hide-mode-line.html
(defvar-local hidden-mode-line-mode nil)
(defvar-local hide-mode-line nil)

(define-minor-mode hidden-mode-line-mode
  "Minor mode to hide the mode-line in the current buffer."
  :init-value nil
  :global nil
  :variable hidden-mode-line-mode
  :group 'editing-basics
  (if hidden-mode-line-mode
      (setq hide-mode-line mode-line-format
            mode-line-format nil)
    (setq mode-line-format hide-mode-line
          hide-mode-line nil))
  (force-mode-line-update)
  ;; Apparently force-mode-line-update is not always enough to
  ;; redisplay the mode-line
  (redraw-display)
  (when (and (called-interactively-p 'interactive)
             hidden-mode-line-mode)
    (run-with-idle-timer
     0 nil 'message
     (concat "Hidden Mode Line Mode enabled.  "
             "Use M-x hidden-mode-line-mode to make the mode-line appear."))))

(add-hook 'after-change-major-mode-hook 'hidden-mode-line-mode)
#+END_SRC

* Emacs Lisp and Clojure initialization

#+BEGIN_SRC emacs-lisp
;; Emacs Lisp and Clojure initialization
(add-hook 'emacs-lisp-mode-hook 'company-mode)
(add-hook 'emacs-lisp-mode-hook 'electric-indent-mode 'append)
(add-hook 'emacs-lisp-mode-hook 'bzg-fontify-headline)
(add-hook 'emacs-lisp-mode-hook 'bzg-fontify-todo)
(add-hook 'emacs-lisp-mode-hook 'turn-on-orgstruct)
(add-hook 'clojure-mode-hook 'company-mode)
(add-hook 'cider-repl-mode-hook 'company-mode)
(add-hook 'clojure-mode-hook 'bzg-fontify-headline)
(add-hook 'clojure-mode-hook 'bzg-fontify-todo)
(add-hook 'clojure-mode-hook 'turn-on-orgstruct)

;; (global-company-mode)
;; (setq company-idle-delay nil) ; never start completions automatically
;; (global-set-key (kbd "M-TAB") #'company-complete) ; use M-TAB, a.k.a. C-M-i, as manual trigger
#+END_SRC

* Misc

#+BEGIN_SRC emacs-lisp
;; magit configuration
(require 'magit)
(setq magit-save-some-buffers 'dontask
      magit-commit-all-when-nothing-staged 'ask
      magit-auto-revert-mode nil
      magit-last-seen-setup-instructions "1.4.0"
      magit-push-always-verify nil)

;; doc-view and eww/shr configuration
(setq doc-view-continuous t)
(setq doc-view-scale-internally nil)

(setq eww-header-line-format nil
      shr-use-fonts nil
      shr-color-visible-distance-min 10
      shr-color-visible-luminance-min 80)

;; Use imagemagick, if available
(when (fboundp 'imagemagick-register-types)
  (imagemagick-register-types))

(add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)

;; Use smart-mode-line package
(smart-mode-line-enable)

;; Personal stuff
(defun bzg-find-bzg nil
  "Find the bzg.org file."
  (interactive)
  (find-file "~/org/bzg.org"))

(defun uniquify-all-lines-region (start end)
  "Find duplicate lines in region START to END keeping first occurrence."
  (interactive "*r")
  (save-excursion
    (let ((end (copy-marker end)))
      (while
          (progn
            (goto-char start)
            (re-search-forward "^\\(.*\\)\n\\(\\(.*\n\\)*\\)\\1\n" end t))
        (replace-match "\\1\n\\2")))))

(defun uniquify-all-lines-buffer ()
  "Delete duplicate lines in buffer and keep first occurrence."
  (interactive "*")
  (uniquify-all-lines-region (point-min) (point-max)))

(defun org-dblock-write:amazon (params)
  "Dynamic block for inserting the cover of a book."
  (interactive)
  (let* ((asin (plist-get params :asin))
         (tpl "<a style=\"float:right;width:160px;margin:2em;\" href=\"https://www.amazon.fr/gp/product/%s/ref=as_li_qf_sp_asin_il?ie=UTF8&tag=bastguer-21&linkCode=as2&camp=1642&creative=6746&creativeASIN=%s\"><img border=\"0\" src=\"https://images.amazon.com/images/P/%s.jpg\" ></a><img src=\"https://www.assoc-amazon.fr/e/ir?t=bastguer-21&l=as2&o=8&a=%s\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />")
         (str (format tpl asin asin asin asin)))
    (insert "#+begin_export html\n" str "\n#+end_export")))

;; Fontifying todo items outside of org-mode
(defface bzg-todo-comment-face
  '((t (:weight bold
        :bold t)))
  "Face for TODO in code buffers."
  :group 'org-faces)

(defface bzg-headline-face
  '((t (:weight bold
        :bold t)))
  "Face for headlines."
  :group 'org-faces)

(defvar bzg-todo-comment-face 'bzg-todo-comment-face)
(defvar bzg-headline-face 'bzg-headline-face)

(defun bzg-fontify-todo ()
  (font-lock-add-keywords
   nil '((";;.*\\(TODO\\|FIXME\\)"
          (1 todo-comment-face t)))))

(defun bzg-fontify-headline ()
  (font-lock-add-keywords
   nil '(("^;;;;* ?\\(.*\\)\\>"
          (1 headline-face t)))))

;; (defun insert-xo () (interactive) (insert "⨰"))

;; (pdf-tools-install)
#+END_SRC

